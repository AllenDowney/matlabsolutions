#summary General information on Subversion

==Subversion Concepts==

Subversion, abbreviated svn, is a suite of programs for managing
repositories.  A repository is an archive that keeps track of
successive versions of electronic documents.  A repository is often
(but not necessarily) on a remote server; for this project, the
repository is on the Google Code server.

Before we get to the details, here is an overview of the operations you will perform:

1) First, you will copy the repository from the server to your
   computer.  This is called "checking out" (by analogy with checking a
   book out of a library).  The copy of the repository on your computer
   is called a "local copy" or "working copy."

2) Next you will navigate into the newly-created directory and either
   modify existing files or add new files and directories.  If you add
   a new file or directory, you have to tell svn about it.  This
   operation is called an "add", but that name is a little misleading;
   it would be more precise to say, "notify svn about a new addition."

3) When you are ready to copy your changes and additions back to the
   repository, you "check in" (again, by analogy with a library).
   This operation is also called "commit", because by copying your
   changes back to the repository, you are making the changes
   permanent.  But don't be afraid of commitment; your repository
   keeps track of all prior versions, so if you commit a change and
   then regret it, you can always revert to a prior version.

4) After you commit a change, you request a code review.  You will be
   notified when someone comments on your code.  They you should either
   make the requested changes or argue with the reviewer :)

One note: you might have files in your local copy that are not part of
the repository.  These files are "not under version control."  In general,
source code that you write should be under version control, and files that
are generated by a compiler, or other program, should not.  If your program
needs to read data files, they should be in the repository.  But if your program
generates files as output, they should not.

The set of files in the repository should be complete, in the sense that someone
could check out a new local copy and have everything they need.

==Subversion Tutorial==

Now here are the details about how you perform each of those
operations:

1) To check out the repository, go to the Google Code page for the project,
click on the Source tab, and follow the instructions.  For example, to check
out the matlabsolutions repository, type:

{{{
svn co https://matlabsolutions.googlecode.com/svn/trunk/ matlabsolutions --username yourusername
}}}

   All svn commands begin with "svn" followed by an operation
   and other arguments.  In this case the operation is "co",
   which stands for "checkout".  The argument is the URL
   of the repository; the second is the directory where the local copy will go.

   Of course, you should replace "yourusername" with your Google Code account name.
   If you don't have an account on Google Code, you can create one by logging in
   at code.google.com with a Google account.  If you don't have a Google account,
   you can create one here:

   https://www.google.com/accounts/NewAccount

2) If you type "ls" you should see a new directory named matlabsolutions.  This is your local copy of the repository.

   Navigate into this directory and type "ls".  You should see
   one directory for each chapter and another directory named "contributors".

   Navigate into "contributors".  You should see a file for each person who has
   contributed a solution.  Create a new file with a name like "your.name";
   you can leave the file empty or write a short bio for yourself.

   To notify svn that this file should be considered part of the
   repository, run

{{{
svn add your.name
}}}

   You should get a message like "A  your.name".


3) To check in your changes (in this case the added file), type

{{{
svn ci -m "Adding your.name to contributors"
}}}

   The command "ci" stands for "check in".  The -m argument is a message that
   will appear in the repository logs.

   The first time you check in, you will be prompted for your password.
   Type your Google Code password, which is not the same as the password for
   your Google account.  You can get your Google Code password here:
   https://code.google.com/hosting/settings

   You should get a series of messages telling you what svn is
   doing, ending with something like, "Committed revision XX."

   To confirm that the server has the new file, you can use
   a browser to view

   http://code.google.com/p/matlabsolutions/source/browse/#svn/trunk/contributors

   You should see the new file there.


4) To request a code review, click on your new file, then click on the link
in the upper right that says "Request code review."  

This step is currently broken -- I am waiting for more info.  Skip to step 5.

http://code.google.com/p/support/wiki/CodeReviews

Next, click "Submit issue".

An "issue" is a record in the tracking system, which keeps track of the to-do
list for the project.


5) Whenever you sit down to work in your local copy, you should
start by updating, which means copying any recent changes from
the repository into your local copy.

To update your local copy, type:

svn update

   If you do that now, you should get a message like
   "At revision XX," which indicates that your local copy
   is already the same as the repository copy.

==Contributing a solution==

If the exercise indicates what the name of the file should be, please use that
name; otherwise, use a name like exercise1.1.m.  And, of course, you should put
the file in the folder that corresponds to the chapter the exercise is in.

At the beginning of the file, please include comments with the name of the book,
the author(s) of the solution, and the license.  For example:

{{{
% This file contains code used in "Physical Modeling in MATLAB",
% by Allen B. Downey, available from greenteapress.com

% Copyright 2010 Allen B. Downey
% License: GNU GPLv3 http://www.gnu.org/licenses/gpl.html
}}}

As far as coding style goes, please indent the bodies of functions and other code blocks with 4 spaces.  Use capital letters for vector/matrix variables and lowercase letters for scalars.  Use column vectors unless there is a reason not to.  That's all I can think of for now.

=Links=

If you want more information about
Subversion, there are several good guides online, including
am excellent, and free, book at

http://svnbook.red-bean.com/

Here's the page that is specific to Subversion at Google Code:

http://code.google.com/p/support/wiki/SubversionFAQ

And there are several tutorials at

http://polishlinux.org/apps/subversion-howto/

http://www.linux.com/articles/45381

http://www.onlamp.com/pub/a/onlamp/2002/10/31/subversion.html